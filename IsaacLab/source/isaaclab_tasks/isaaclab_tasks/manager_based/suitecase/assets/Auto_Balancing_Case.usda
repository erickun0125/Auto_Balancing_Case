#usda 1.0
(
    defaultPrim = "World"
    doc = """Generated from Composed Stage of root layer 
"""
    endTimeCode = 1000000
    metersPerUnit = 1
    startTimeCode = 0
    timeCodesPerSecond = 60
    upAxis = "Z"
)

over "Flattened_Prototype_1"
{
}

over "Flattened_Prototype_2"
{
    def Xform "mesh_0"
    {
        rel material:binding = </World/Auto_Balancing_Case/Looks/material_silver> (
            bindMaterialAs = "strongerThanDescendants"
        )
        quatd xformOp:orient = (0.7071055173873901, -0.7071080803871155, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cylinder "cylinder"
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.025, -0.025, -0.025), (0.025, 0.025, 0.025)]
            double height = 0.05000000074505806
            double radius = 0.02500000037252903
        }
    }
}

over "Flattened_Prototype_3"
{
    def Xform "mesh_0"
    {
        uniform token purpose = "guide"
        quatd xformOp:orient = (0.7071055173873901, -0.7071080803871155, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cylinder "cylinder" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.025, -0.025, -0.025), (0.025, 0.025, 0.025)]
            double height = 0.05000000074505806
            double radius = 0.02500000037252903
        }
    }
}

over "Flattened_Prototype_4"
{
    def Xform "mesh_0"
    {
        rel material:binding = </World/Auto_Balancing_Case/Looks/material_silver> (
            bindMaterialAs = "strongerThanDescendants"
        )
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (0.36000001430511475, 0.23000000417232513, 0.009999999776482582)
        double3 xformOp:translate = (0.18000000715255737, 0.11500000208616257, 0.004999999888241291)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cube "box"
        {
            float3[] extent = [(-0.18, -0.115, -0.005), (0.18, 0.115, 0.005)]
            double size = 1
        }
    }
}

over "Flattened_Prototype_5"
{
    def Xform "mesh_0"
    {
        rel material:binding = </World/Auto_Balancing_Case/Looks/material_silver> (
            bindMaterialAs = "strongerThanDescendants"
        )
        quatd xformOp:orient = (0.7071055173873901, -0.7071080803871155, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cylinder "cylinder"
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.025, -0.025, -0.025), (0.025, 0.025, 0.025)]
            double height = 0.05000000074505806
            double radius = 0.02500000037252903
        }
    }
}

over "Flattened_Prototype_6"
{
}

over "Flattened_Prototype_7"
{
    def Xform "mesh_0"
    {
        uniform token purpose = "guide"
        quatd xformOp:orient = (0.7071055173873901, -0.7071080803871155, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cylinder "cylinder" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.025, -0.025, -0.025), (0.025, 0.025, 0.025)]
            double height = 0.05000000074505806
            double radius = 0.02500000037252903
        }
    }
}

over "Flattened_Prototype_8"
{
    def Xform "mesh_0"
    {
        uniform token purpose = "guide"
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (0.36000001430511475, 0.23000000417232513, 0.5)
        double3 xformOp:translate = (0, 0.11500000208616257, 0.29688000679016113)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cube "box" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.18, -0.115, -0.25), (0.18, 0.115, 0.25)]
            double size = 1
        }
    }

    def Xform "mesh_1"
    {
        uniform token purpose = "guide"
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (0.15000000596046448, 0.009999999776482582, 0.3499999940395355)
        double3 xformOp:translate = (0, 0.004999999888241291, 0.7161879539489746)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cube "box" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.075, -0.005, -0.175), (0.075, 0.005, 0.175)]
            double size = 1
        }
    }
}

over "Flattened_Prototype_9"
{
    def Xform "mesh_0"
    {
        rel material:binding = </World/Auto_Balancing_Case/Looks/material_silver> (
            bindMaterialAs = "strongerThanDescendants"
        )
        quatd xformOp:orient = (0.7071055173873901, -0.7071080803871155, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cylinder "cylinder"
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.025, -0.025, -0.025), (0.025, 0.025, 0.025)]
            double height = 0.05000000074505806
            double radius = 0.02500000037252903
        }
    }
}

over "Flattened_Prototype_10"
{
}

over "Flattened_Prototype_11"
{
    def Xform "mesh_0"
    {
        uniform token purpose = "guide"
        quatd xformOp:orient = (0.7071055173873901, -0.7071080803871155, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cylinder "cylinder" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.025, -0.025, -0.025), (0.025, 0.025, 0.025)]
            double height = 0.05000000074505806
            double radius = 0.02500000037252903
        }
    }
}

over "Flattened_Prototype_12"
{
    def Xform "mesh_0"
    {
        uniform token purpose = "guide"
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (0.36000001430511475, 0.23000000417232513, 0.009999999776482582)
        double3 xformOp:translate = (0.18000000715255737, 0.11500000208616257, 0.004999999888241291)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cube "box" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.18, -0.115, -0.005), (0.18, 0.115, 0.005)]
            double size = 1
        }
    }
}

over "Flattened_Prototype_13"
{
    def Xform "mesh_0"
    {
        uniform token purpose = "guide"
        quatd xformOp:orient = (0.7071055173873901, -0.7071080803871155, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cylinder "cylinder" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.025, -0.025, -0.025), (0.025, 0.025, 0.025)]
            double height = 0.05000000074505806
            double radius = 0.02500000037252903
        }
    }
}

over "Flattened_Prototype_14"
{
}

over "Flattened_Prototype_15"
{
}

over "Flattened_Prototype_16"
{
    def Xform "mesh_0"
    {
        rel material:binding = </World/Auto_Balancing_Case/Looks/material_silver> (
            bindMaterialAs = "strongerThanDescendants"
        )
        quatd xformOp:orient = (0.7071055173873901, -0.7071080803871155, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cylinder "cylinder"
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.025, -0.025, -0.025), (0.025, 0.025, 0.025)]
            double height = 0.05000000074505806
            double radius = 0.02500000037252903
        }
    }
}

over "Flattened_Prototype_17"
{
    def Xform "mesh_0"
    {
        rel material:binding = </World/Auto_Balancing_Case/Looks/material_silver> (
            bindMaterialAs = "strongerThanDescendants"
        )
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (0.36000001430511475, 0.23000000417232513, 0.5)
        double3 xformOp:translate = (0, 0.11500000208616257, 0.29688000679016113)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cube "box"
        {
            float3[] extent = [(-0.18, -0.115, -0.25), (0.18, 0.115, 0.25)]
            double size = 1
        }
    }

    def Xform "mesh_1"
    {
        rel material:binding = </World/Auto_Balancing_Case/Looks/material_silver> (
            bindMaterialAs = "strongerThanDescendants"
        )
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (0.15000000596046448, 0.009999999776482582, 0.3499999940395355)
        double3 xformOp:translate = (0, 0.004999999888241291, 0.7161879539489746)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cube "box"
        {
            float3[] extent = [(-0.075, -0.005, -0.175), (0.075, 0.005, 0.175)]
            double size = 1
        }
    }
}

def Xform "World"
{
    def Xform "Auto_Balancing_Case"
    {
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Scope "Looks"
        {
            def Material "material_silver"
            {
                token outputs:mdl:displacement.connect = </World/Auto_Balancing_Case/Looks/material_silver/Shader.outputs:out>
                token outputs:mdl:surface.connect = </World/Auto_Balancing_Case/Looks/material_silver/Shader.outputs:out>
                token outputs:mdl:volume.connect = </World/Auto_Balancing_Case/Looks/material_silver/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                    color3f inputs:diffuse_color_constant = (0.75, 0.75, 0.75)
                    token outputs:out
                }
            }
        }

        def Scope "joints"
        {
            def PhysicsRevoluteJoint "Revolute_1" (
                apiSchemas = ["PhysxJointAPI", "PhysicsDriveAPI:angular"]
            )
            {
                float drive:angular:physics:damping = 0.0011264092
                float drive:angular:physics:maxForce = 3.4028235e38
                float drive:angular:physics:stiffness = 2.8160229
                float drive:angular:physics:targetPosition = 0
                uniform token drive:angular:physics:type = "force"
                uniform token physics:axis = "Z"
                rel physics:body0 = </World/Auto_Balancing_Case/base_link>
                rel physics:body1 = </World/Auto_Balancing_Case/FR_wheelbase_1>
                float physics:breakForce = 3.4028235e38
                float physics:breakTorque = 3.4028235e38
                float physics:JointEquivalentInertia = 0.0045056366
                point3f physics:localPos0 = (0.02, 0.21, 0.0001)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (0, 0, 1, 0)
                quatf physics:localRot1 = (0, 0, 1, 0)
                float physics:lowerLimit = -inf
                float physics:upperLimit = inf
                float physxJoint:maxJointVelocity = inf
            }

            def PhysicsRevoluteJoint "Revolute_7" (
                apiSchemas = ["PhysxJointAPI", "PhysicsDriveAPI:angular"]
            )
            {
                float drive:angular:physics:damping = 0.00003157205
                float drive:angular:physics:maxForce = 3.4028235e38
                float drive:angular:physics:stiffness = 0.078930125
                float drive:angular:physics:targetPosition = 0
                uniform token drive:angular:physics:type = "force"
                uniform token physics:axis = "Y"
                rel physics:body0 = </World/Auto_Balancing_Case/FR_wheelbase_1>
                rel physics:body1 = </World/Auto_Balancing_Case/FR_wheel_1>
                float physics:breakForce = 3.4028235e38
                float physics:breakTorque = 3.4028235e38
                float physics:JointEquivalentInertia = 0.0001262882
                point3f physics:localPos0 = (0.02, 0, -0.035)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
                float physics:lowerLimit = -inf
                float physics:upperLimit = inf
                float physxJoint:maxJointVelocity = inf
            }

            def PhysicsRevoluteJoint "Revolute_2" (
                apiSchemas = ["PhysxJointAPI", "PhysicsDriveAPI:angular"]
            )
            {
                float drive:angular:physics:damping = 0.004086394
                float drive:angular:physics:maxForce = 3.4028235e38
                float drive:angular:physics:stiffness = 10.215984
                float drive:angular:physics:targetPosition = 0
                uniform token drive:angular:physics:type = "force"
                uniform token physics:axis = "Z"
                rel physics:body0 = </World/Auto_Balancing_Case/base_link>
                rel physics:body1 = </World/Auto_Balancing_Case/RR_wheelbase_1>
                float physics:breakForce = 3.4028235e38
                float physics:breakTorque = 3.4028235e38
                float physics:JointEquivalentInertia = 0.016345575
                point3f physics:localPos0 = (0.34, 0.21, 0.0001)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (0, 0, 1, 0)
                quatf physics:localRot1 = (0, 0, 1, 0)
                float physics:lowerLimit = -inf
                float physics:upperLimit = inf
                float physxJoint:maxJointVelocity = inf
            }

            def PhysicsRevoluteJoint "Revolute_6" (
                apiSchemas = ["PhysxJointAPI", "PhysicsDriveAPI:angular"]
            )
            {
                float drive:angular:physics:damping = 0.000031525222
                float drive:angular:physics:maxForce = 3.4028235e38
                float drive:angular:physics:stiffness = 0.07881305
                float drive:angular:physics:targetPosition = 0
                uniform token drive:angular:physics:type = "force"
                uniform token physics:axis = "Y"
                rel physics:body0 = </World/Auto_Balancing_Case/RR_wheelbase_1>
                rel physics:body1 = </World/Auto_Balancing_Case/RR_wheel_1>
                float physics:breakForce = 3.4028235e38
                float physics:breakTorque = 3.4028235e38
                float physics:JointEquivalentInertia = 0.00012610089
                point3f physics:localPos0 = (0.01992, 0, -0.035)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
                float physics:lowerLimit = -inf
                float physics:upperLimit = inf
                float physxJoint:maxJointVelocity = inf
            }

            def PhysicsRevoluteJoint "Revolute_3" (
                apiSchemas = ["PhysxJointAPI", "PhysicsDriveAPI:angular"]
            )
            {
                float drive:angular:physics:damping = 0.0000676805
                float drive:angular:physics:maxForce = 3.4028235e38
                float drive:angular:physics:stiffness = 0.16920125
                float drive:angular:physics:targetPosition = 0
                uniform token drive:angular:physics:type = "force"
                uniform token physics:axis = "Z"
                rel physics:body0 = </World/Auto_Balancing_Case/base_link>
                rel physics:body1 = </World/Auto_Balancing_Case/FL_wheelbase_1>
                float physics:breakForce = 3.4028235e38
                float physics:breakTorque = 3.4028235e38
                float physics:JointEquivalentInertia = 0.000270722
                point3f physics:localPos0 = (0.02, 0.02, 0.0001)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (0, 0, 1, 0)
                quatf physics:localRot1 = (0, 0, 1, 0)
                float physics:lowerLimit = -inf
                float physics:upperLimit = inf
                float physxJoint:maxJointVelocity = inf
            }

            def PhysicsRevoluteJoint "Revolute_5" (
                apiSchemas = ["PhysxJointAPI", "PhysicsDriveAPI:angular"]
            )
            {
                float drive:angular:physics:damping = 0.000031572017
                float drive:angular:physics:maxForce = 3.4028235e38
                float drive:angular:physics:stiffness = 0.07893004
                float drive:angular:physics:targetPosition = 0
                uniform token drive:angular:physics:type = "force"
                uniform token physics:axis = "Y"
                rel physics:body0 = </World/Auto_Balancing_Case/FL_wheelbase_1>
                rel physics:body1 = </World/Auto_Balancing_Case/FL_wheel_1>
                float physics:breakForce = 3.4028235e38
                float physics:breakTorque = 3.4028235e38
                float physics:JointEquivalentInertia = 0.00012628807
                point3f physics:localPos0 = (0.02, 0, -0.035)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
                float physics:lowerLimit = -inf
                float physics:upperLimit = inf
                float physxJoint:maxJointVelocity = inf
            }

            def PhysicsRevoluteJoint "Revolute_4" (
                apiSchemas = ["PhysxJointAPI", "PhysicsDriveAPI:angular"]
            )
            {
                float drive:angular:physics:damping = 0.00304981
                float drive:angular:physics:maxForce = 3.4028235e38
                float drive:angular:physics:stiffness = 7.624525
                float drive:angular:physics:targetPosition = 0
                uniform token drive:angular:physics:type = "force"
                uniform token physics:axis = "Z"
                rel physics:body0 = </World/Auto_Balancing_Case/base_link>
                rel physics:body1 = </World/Auto_Balancing_Case/RL_wheelbase_1>
                float physics:breakForce = 3.4028235e38
                float physics:breakTorque = 3.4028235e38
                float physics:JointEquivalentInertia = 0.01219924
                point3f physics:localPos0 = (0.34, 0.02, 0.0001)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (0, 0, 1, 0)
                quatf physics:localRot1 = (0, 0, 1, 0)
                float physics:lowerLimit = -inf
                float physics:upperLimit = inf
                float physxJoint:maxJointVelocity = inf
            }

            def PhysicsRevoluteJoint "Revolute_8" (
                apiSchemas = ["PhysxJointAPI", "PhysicsDriveAPI:angular"]
            )
            {
                float drive:angular:physics:damping = 0.000031525193
                float drive:angular:physics:maxForce = 3.4028235e38
                float drive:angular:physics:stiffness = 0.07881298
                float drive:angular:physics:targetPosition = 0
                uniform token drive:angular:physics:type = "force"
                uniform token physics:axis = "Y"
                rel physics:body0 = </World/Auto_Balancing_Case/RL_wheelbase_1>
                rel physics:body1 = </World/Auto_Balancing_Case/RL_wheel_1>
                float physics:breakForce = 3.4028235e38
                float physics:breakTorque = 3.4028235e38
                float physics:JointEquivalentInertia = 0.00012610077
                point3f physics:localPos0 = (0.01992, 0, -0.035)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
                float physics:lowerLimit = -inf
                float physics:upperLimit = inf
                float physxJoint:maxJointVelocity = inf
            }

            def PhysicsRevoluteJoint "Revolute_motor" (
                apiSchemas = ["PhysicsJointStateAPI:angular", "PhysxJointAPI", "PhysicsDriveAPI:angular"]
            )
            {
                float drive:angular:physics:damping = 0.013549474
                float drive:angular:physics:maxForce = 3
                float drive:angular:physics:stiffness = 33.873688
                float drive:angular:physics:targetPosition = 0
                uniform token drive:angular:physics:type = "force"
                uniform token physics:axis = "Y"
                rel physics:body0 = </World/Auto_Balancing_Case/base_link>
                rel physics:body1 = </World/Auto_Balancing_Case/luggage_case_1>
                float physics:breakForce = 3.4028235e38
                float physics:breakTorque = 3.4028235e38
                float physics:JointEquivalentInertia = 0.054197896
                point3f physics:localPos0 = (0.18, 0, 0.06)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (0, 1, 0, 0)
                quatf physics:localRot1 = (0, 1, 0, 0)
                float physics:lowerLimit = -30.000067
                float physics:upperLimit = 30.000067
                float physxJoint:maxJointVelocity = 360.00082
            }
        }

        def Xform "base_link" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsArticulationRootAPI"]
        )
        {
            bool physxArticulation:enabledSelfCollisions = 0
            int physxArticulation:solverPositionIterationCount = 32
            int physxArticulation:solverVelocityIterationCount = 1

            point3f physics:centerOfMass = (0.18, 0.115, 0.0050030067)
            float3 physics:diagonalInertia = (0.004346, 0.010634, 0.014964)
            float physics:mass = 0.98472184
            quatf physics:principalAxes = (1, 0, 0, 0)
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Xform "visuals" (
                instanceable = true
                add references = </Flattened_Prototype_4>
            )
            {
            }

            def Xform "collisions" (
                instanceable = true
                add references = </Flattened_Prototype_12>
            )
            {
            }
        }

        def Xform "FR_wheelbase_1" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0.004854891, 0, -0.012243964)
            float3 physics:diagonalInertia = (0.0000039999995, 0.000004, 0.0000059999998)
            float physics:mass = 0.02634809
            quatf physics:principalAxes = (0.92387956, 0, 0.38268343, 0)
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0.019999999552965164, 0.20999999344348907, 0.00009999999747378752)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Xform "visuals" (
                instanceable = true
                add references = </Flattened_Prototype_10>
            )
            {
            }

            def Xform "collisions"
            {
            }
        }

        def Xform "FR_wheel_1" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (6.0021432e-15, 0, 1.3877788e-17)
            float3 physics:diagonalInertia = (0.000024, 0.000013, 0.000024)
            float physics:mass = 0.042466283
            quatf physics:principalAxes = (1, 0, 0, 0)
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0.03999999910593033, 0.20999999344348907, -0.0348999984562397)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Xform "visuals" (
                instanceable = true
                add references = </Flattened_Prototype_2>
            )
            {
            }

            def Xform "collisions" (
                instanceable = true
                add references = </Flattened_Prototype_13>
            )
            {
            }
        }

        def Xform "RR_wheelbase_1" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0.004821351, -2.7755576e-17, -0.012195503)
            float3 physics:diagonalInertia = (0.0000039999995, 0.000004, 0.0000059999998)
            float physics:mass = 0.026149733
            quatf physics:principalAxes = (0.92387956, 0, 0.38268343, 0)
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0.3400000035762787, 0.20999999344348907, 0.00009999999747378752)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Xform "visuals" (
                instanceable = true
                add references = </Flattened_Prototype_14>
            )
            {
            }

            def Xform "collisions"
            {
            }
        }

        def Xform "RR_wheel_1" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (-1.3006671e-7, 0, -2.0816682e-17)
            float3 physics:diagonalInertia = (0.000024, 0.000013, 0.000024)
            float physics:mass = 0.042466283
            quatf physics:principalAxes = (1, 0, 0, 0)
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0.3599199950695038, 0.20999999344348907, -0.0348999984562397)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Xform "visuals" (
                instanceable = true
                add references = </Flattened_Prototype_9>
            )
            {
            }

            def Xform "collisions" (
                instanceable = true
                add references = </Flattened_Prototype_3>
            )
            {
            }
        }

        def Xform "FL_wheelbase_1" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0.004854891, -1.0408341e-17, -0.012243964)
            float3 physics:diagonalInertia = (0.0000039999995, 0.000004, 0.0000059999998)
            float physics:mass = 0.02634809
            quatf physics:principalAxes = (0.92387956, 0, 0.38268343, 0)
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0.019999999552965164, 0.019999999552965164, 0.00009999999747378752)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Xform "visuals" (
                instanceable = true
                add references = </Flattened_Prototype_6>
            )
            {
            }

            def Xform "collisions"
            {
            }
        }

        def Xform "FL_wheel_1" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (5.9882654e-15, -3.469447e-18, 1.3877788e-17)
            float3 physics:diagonalInertia = (0.000024, 0.000013, 0.000024)
            float physics:mass = 0.042466283
            quatf physics:principalAxes = (1, 0, 0, 0)
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0.03999999910593033, 0.019999999552965164, -0.0348999984562397)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Xform "visuals" (
                instanceable = true
                add references = </Flattened_Prototype_5>
            )
            {
            }

            def Xform "collisions" (
                instanceable = true
                add references = </Flattened_Prototype_11>
            )
            {
            }
        }

        def Xform "RL_wheelbase_1" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0.004821351, -2.7755576e-17, -0.012195503)
            float3 physics:diagonalInertia = (0.0000039999995, 0.000004, 0.0000059999998)
            float physics:mass = 0.026149733
            quatf physics:principalAxes = (0.92387956, 0, 0.38268343, 0)
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0.3400000035762787, 0.019999999552965164, 0.00009999999747378752)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Xform "visuals" (
                instanceable = true
                add references = </Flattened_Prototype_1>
            )
            {
            }

            def Xform "collisions"
            {
            }
        }

        def Xform "RL_wheel_1" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (-1.3006671e-7, 6.2450045e-17, 0)
            float3 physics:diagonalInertia = (0.000024, 0.000013, 0.000024)
            float physics:mass = 0.042466283
            quatf physics:principalAxes = (1, 0, 0, 0)
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0.3599199950695038, 0.019999999552965164, -0.0348999984562397)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Xform "visuals" (
                instanceable = true
                add references = </Flattened_Prototype_16>
            )
            {
            }

            def Xform "collisions" (
                instanceable = true
                add references = </Flattened_Prototype_7>
            )
            {
            }
        }

        def Xform "luggage_case_1" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (1.0107193e-12, 0.11138362, 0.19099104)
            float3 physics:diagonalInertia = (0.281154, 0.3078355, 0.12003348)
            float physics:mass = 5.601341
            quatf physics:principalAxes = (0.9995926, 0.028542902, 0, 0)
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0.18000000715255737, 0, 0.05999999865889549)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Xform "handle"
            {
                quatd xformOp:orient = (1, 0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -0, 0.3661879897117615)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def Xform "visuals" (
                instanceable = true
                add references = </Flattened_Prototype_17>
            )
            {
            }

            def Xform "collisions" (
                instanceable = true
                add references = </Flattened_Prototype_8>
            )
            {
            }
        }
    }
}

def Xform "Environment"
{
    quatd xformOp:orient = (1, 0, 0, 0)
    double3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def DistantLight "defaultLight" (
        apiSchemas = ["ShapingAPI"]
    )
    {
        float inputs:angle = 1
        float inputs:intensity = 3000
        float inputs:shaping:cone:angle = 180
        float inputs:shaping:cone:softness
        float inputs:shaping:focus
        color3f inputs:shaping:focusTint
        asset inputs:shaping:ies:file
        quatd xformOp:orient = (0.6532814824381883, 0.2705980500730985, 0.27059805007309845, 0.6532814824381882)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }
}

over "Render" (
    hide_in_stage_window = true
)
{
}

def PhysicsScene "physicsScene" (
    apiSchemas = ["PhysxSceneAPI"]
)
{
}

